{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"kupo-py","text":"<p>A Python client for interacting with Kupo, a lightweight and fast Cardano blockchain indexer. This client provides a simple and intuitive interface to query and interact with Kupo's HTTP API.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Asynchronous HTTP client for optimal performance</li> <li>Type-safe responses using Pydantic models</li> <li>Comprehensive API coverage</li> <li>Easy-to-use interface for common Kupo operations</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install kupo-py\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#setting-up-kupo","title":"Setting up Kupo","text":"<p>Before using this client, you'll need to have a Kupo instance running. The easiest way to get started is using Docker:</p> <pre><code>docker run -d \\\n  --name kupo \\\n  -p 1442:1442 \\\n  cardanosolutions/kupo:latest\n</code></pre> <p>For more detailed setup instructions and configuration options, please refer to the Kupo documentation.</p>"},{"location":"#using-the-client","title":"Using the Client","text":"<pre><code>from kupo import KupoClient\nfrom kupo.models import Order, Limit, Point\n\n# Initialize the client\nclient = KupoClient(\"http://localhost\", 1442)\n\n# Check the health of the API\nhealth = await client.health_async()\nprint(f\"API Health: {health}\")\n\n# Get matches for an address\nmatches = await client.get_matches_async(\n    pattern=\"addr1qxy2k...\",  # See pattern matching syntax below\n    policy_id=\"policy1...\",\n    asset_name=\"asset1\",\n    order=Order.DESC\n)\nfor match in matches:\n    print(f\"Found match: {match}\")\n</code></pre>"},{"location":"#pattern-matching","title":"Pattern Matching","text":"<p>Kupo uses a powerful pattern matching syntax to filter and match blockchain data. The pattern can be: - A Cardano address - A policy ID - A script hash - A datum hash - A combination of these using the <code>*</code> wildcard</p> <p>For example: - <code>addr1qxy2k...</code> - Match a specific address - <code>policy1...</code> - Match a specific policy ID - <code>script1...</code> - Match a specific script - <code>datum1...</code> - Match a specific datum - <code>addr1*</code> - Match all addresses starting with \"addr1\"</p> <p>For detailed pattern matching syntax and examples, see the Kupo Pattern Matching documentation.</p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#querying-matches","title":"Querying Matches","text":"<pre><code># Get all matches with filtering\nmatches = await client.get_all_matches_async(\n    spent=True,  # Only get spent transactions\n    created_after=1000000,  # Created after slot 1000000\n    order=Order.ASC  # Oldest first\n)\n\n# Get matches for a specific address\nmatches = await client.get_matches_async(\n    pattern=\"addr1qxy2k...\",\n    unspent=True,  # Only get unspent UTxOs\n    policy_id=\"policy1...\"  # Filter by policy ID\n)\n</code></pre>"},{"location":"#working-with-scripts-and-datums","title":"Working with Scripts and Datums","text":"<pre><code># Get a script by its hash\nscript = await client.get_script_by_hash_async(\"script1...\")\nprint(f\"Script: {script}\")\n\n# Get a datum by its hash\ndatum = await client.get_datum_by_hash_async(\"datum1...\")\nprint(f\"Datum: {datum}\")\n\n# Get metadata for a transaction\nmetadata = await client.get_metadata_by_tx_async(\"tx1...\")\nprint(f\"Transaction metadata: {metadata}\")\n</code></pre>"},{"location":"#managing-patterns","title":"Managing Patterns","text":"<pre><code># Get all patterns\npatterns = await client.get_patterns_async()\nprint(f\"Active patterns: {patterns}\")\n\n# Add a new pattern\npattern = await client.add_pattern_async(\n    pattern=\"addr1qxy2k...\",\n    rollback_to=Point(slot_no=1000000),  # Rollback to specific slot\n    limit=Limit.SAFE\n)\n\n# Add multiple patterns at once\npatterns = await client.bulk_add_pattern_async(\n    patterns=[\"addr1qxy2k...\", \"addr1qxy2k...\"],\n    rollback_to={\"slot_no\": 1000000}\n)\n</code></pre>"},{"location":"#api-reference","title":"API Reference","text":"<p>For detailed API documentation, please refer to the Kupo documentation.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please follow these guidelines when contributing:</p>"},{"location":"#branch-naming","title":"Branch Naming","text":"<p>This project uses semantic versioning and automated version bumping based on branch names. When creating a new branch, please follow these naming conventions:</p> <ul> <li>For new features: <code>feat/your-feature-name</code> or <code>feature/your-feature-name</code></li> <li>This will trigger a minor version bump when merged to dev</li> <li>For bug fixes: <code>fix/your-fix-name</code> or <code>bugfix/your-fix-name</code></li> <li>This will trigger a patch version bump when merged to dev</li> </ul>"},{"location":"#development-workflow","title":"Development Workflow","text":"<ol> <li>Create a new branch following the naming convention above</li> <li>Make your changes</li> <li>Submit a pull request to the <code>dev</code> branch</li> <li>Once merged, the version will be automatically bumped based on your branch name</li> <li>When ready for release, create a pull request from <code>dev</code> to <code>master</code></li> </ol>"},{"location":"#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines</li> <li>Use type hints</li> <li>Add docstrings for all public functions and classes</li> <li>Include tests for new functionality</li> </ul>"},{"location":"#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>This project uses pre-commit hooks to ensure code quality and consistency. Before submitting a pull request:</p> <ol> <li> <p>Install pre-commit:    <pre><code>pip install pre-commit\n</code></pre></p> </li> <li> <p>Install the project's pre-commit hooks:    <pre><code>pre-commit install\n</code></pre></p> </li> <li> <p>Run the pre-commit hooks on all files:    <pre><code>pre-commit run --all-files\n</code></pre></p> </li> <li> <p>Make sure all hooks pass before submitting your pull request.</p> </li> </ol> <p>The pre-commit hooks will check for: - Code formatting (black) - Import sorting (isort) - Type checking (mypy) - Linting (ruff) - And other quality checks</p> <p>Please feel free to submit a Pull Request!</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License - see the LICENSE file for details.</p>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#basic-usage","title":"Basic Usage","text":""},{"location":"examples/#synchronous-client","title":"Synchronous Client","text":"<pre><code>from kupo import KupoClient\n\n# Initialize the client\nclient = KupoClient(base_url=\"http://localhost\", port=1442)\n\n# Get matches for an address\nmatches = client.get_matches(\"addr1...\")\n\n# Get all patterns\npatterns = client.get_patterns()\n\n# Check API health\nhealth = client.health()\n</code></pre>"},{"location":"examples/#asynchronous-client","title":"Asynchronous Client","text":"<pre><code>import asyncio\nfrom kupo import KupoClient\n\nasync def main():\n    async with KupoClient(base_url=\"http://localhost\", port=1442) as client:\n        # Get matches for an address\n        matches = await client.get_matches_async(\"addr1...\")\n\n        # Get all patterns\n        patterns = await client.get_patterns_async()\n\n        # Check API health\n        health = await client.health_async()\n\n# Run the async code\nasyncio.run(main())\n</code></pre>"},{"location":"examples/#using-environment-variables","title":"Using Environment Variables","text":"<pre><code>from kupo import KupoClient\nimport os\n\n# The client will automatically use KUPO_BASE_URL and KUPO_PORT from environment\nclient = KupoClient()\n\n# Or specify them explicitly\nclient = KupoClient(\n    base_url=os.getenv(\"KUPO_BASE_URL\", \"http://localhost\"),\n    port=int(os.getenv(\"KUPO_PORT\", \"1442\"))\n)\n</code></pre>"},{"location":"installation/","title":"Installation Guide","text":""},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"installation/#installation","title":"Installation","text":"<p>The simplest way to install kupo-py is using pip:</p> <pre><code>pip install kupo-py\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For development purposes, you can clone the repository and install in editable mode:</p> <pre><code>git clone https://github.com/yourusername/kupo-py.git\ncd kupo-py\npip install -e .\n</code></pre>"},{"location":"installation/#environment-variables","title":"Environment Variables","text":"<p>kupo-py can be configured using environment variables:</p> <ul> <li><code>KUPO_BASE_URL</code>: The base URL of your Kupo instance</li> <li><code>KUPO_PORT</code>: The port number of your Kupo instance</li> </ul> <p>You can set these variables in your environment or use a <code>.env</code> file:</p> <pre><code>KUPO_BASE_URL=http://localhost\nKUPO_PORT=1442\n</code></pre>"},{"location":"api/client/","title":"Client API Reference","text":"<p>This page documents the main client class and its methods.</p>"},{"location":"api/client/#kupo.client.KupoClient","title":"kupo.client.KupoClient","text":"<pre><code>KupoClient(base_url: str | None = None, port: int | None = None)\n</code></pre> <p>A Python client for the Kupo REST API.</p> <p>The Python Kupo API client.</p> PARAMETER DESCRIPTION <code>base_url</code> <p>If not supplied, tries to read from the environment. Defaults to None.</p> <p> TYPE: <code>str | None</code> DEFAULT: <code>None</code> </p> <code>port</code> <p>If not supplied, tries to read from the environment. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> Source code in <code>src/kupo/client.py</code> <pre><code>def __init__(self, base_url: str | None = None, port: int | None = None) -&gt; None:\n    \"\"\"The Python Kupo API client.\n\n    Args:\n        base_url: If not supplied, tries to read from the environment.\n            Defaults to None.\n        port: If not supplied, tries to read from the environment. Defaults to None.\n    \"\"\"\n    if base_url is None:\n        base_url = KUPO_BASE_URL\n\n    if port is None and KUPO_PORT is not None:\n        port = int(KUPO_PORT)\n\n    if base_url is None:\n        raise ValueError(\"base_url must be supplied\")\n\n    if port is None:\n        raise ValueError(\"port must be supplied\")\n\n    self._base_url = base_url\n    self._port = port\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient-attributes","title":"Attributes","text":""},{"location":"api/client/#kupo.client.KupoClient.base_url","title":"base_url  <code>property</code>","text":"<pre><code>base_url: str\n</code></pre> <p>The base URL for the client.</p>"},{"location":"api/client/#kupo.client.KupoClient-functions","title":"Functions","text":""},{"location":"api/client/#kupo.client.KupoClient.add_pattern","title":"add_pattern","text":"<pre><code>add_pattern(pattern: str, rollback_to: int | dict | Point, limit: Limit = Limit.SAFE, timeout: int = 300) -&gt; PatternResponse\n</code></pre> <p>Add a pattern to the database.</p> PARAMETER DESCRIPTION <code>pattern</code> <p>The capture pattern.</p> <p> TYPE: <code>str</code> </p> <code>rollback_to</code> <p>The point to rollback to. Must be either a slot number (int), a Point object, or a dictionary with keys <code>slot_no</code> (required) and <code>header_hash</code> (optional).</p> <p> TYPE: <code>int | dict | Point</code> </p> <code>limit</code> <p>Use safe or unsafe boundaries as defined in the docs. Defaults to Limit.SAFE.</p> <p> TYPE: <code>Limit</code> DEFAULT: <code>SAFE</code> </p> <code>timeout</code> <p>Timeout for the request. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>PatternResponse</code> <p>A PatternResponse object.</p> Source code in <code>src/kupo/client.py</code> <pre><code>def add_pattern(\n    self,\n    pattern: str,\n    rollback_to: int | dict | Point,\n    limit: Limit = Limit.SAFE,\n    timeout: int = 300,\n) -&gt; PatternResponse:\n    \"\"\"Add a pattern to the database.\n\n    Args:\n        pattern: The capture pattern.\n        rollback_to: The point to rollback to. Must be either a slot number (int),\n            a Point object, or a dictionary with keys `slot_no` (required) and\n            `header_hash` (optional).\n        limit: Use safe or unsafe boundaries as defined in the docs.\n            Defaults to Limit.SAFE.\n        timeout: Timeout for the request. Defaults to 300.\n\n    Returns:\n        A PatternResponse object.\n    \"\"\"\n    if isinstance(rollback_to, Point):\n        rollback_to = rollback_to.model_dump(mode=\"json\")\n    elif isinstance(rollback_to, int):\n        rollback_to = {\"slot_no\": rollback_to}\n\n    if \"slot_no\" not in rollback_to:\n        raise ValueError(\"rollback_to must contain slot_no\")\n\n    results = self._put(\n        f\"/patterns/{pattern}\",\n        body={\"rollback_to\": rollback_to, \"limit\": limit.value},\n        timeout=timeout,\n    )\n\n    return PatternResponse.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.add_pattern_async","title":"add_pattern_async  <code>async</code>","text":"<pre><code>add_pattern_async(pattern: str, rollback_to: int | dict | Point, limit: Limit = Limit.SAFE, timeout: int = 300) -&gt; PatternResponse\n</code></pre> <p>Add a pattern to the database.</p> PARAMETER DESCRIPTION <code>pattern</code> <p>The capture pattern.</p> <p> TYPE: <code>str</code> </p> <code>rollback_to</code> <p>The point to rollback to. Must be either a slot number (int), a Point object, or a dictionary with keys <code>slot_no</code> (required) and <code>header_hash</code> (optional).</p> <p> TYPE: <code>int | dict | Point</code> </p> <code>limit</code> <p>Use safe or unsafe boundaries as defined in the docs. Defaults to Limit.SAFE.</p> <p> TYPE: <code>Limit</code> DEFAULT: <code>SAFE</code> </p> <code>timeout</code> <p>Timeout for the request. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>PatternResponse</code> <p>A PatternResponse object.</p> Source code in <code>src/kupo/client.py</code> <pre><code>async def add_pattern_async(\n    self,\n    pattern: str,\n    rollback_to: int | dict | Point,\n    limit: Limit = Limit.SAFE,\n    timeout: int = 300,\n) -&gt; PatternResponse:\n    \"\"\"Add a pattern to the database.\n\n    Args:\n        pattern: The capture pattern.\n        rollback_to: The point to rollback to. Must be either a slot number (int),\n            a Point object, or a dictionary with keys `slot_no` (required) and\n            `header_hash` (optional).\n        limit: Use safe or unsafe boundaries as defined in the docs.\n            Defaults to Limit.SAFE.\n        timeout: Timeout for the request. Defaults to 300.\n\n    Returns:\n        A PatternResponse object.\n    \"\"\"\n    if isinstance(rollback_to, Point):\n        rollback_to = rollback_to.model_dump(mode=\"json\")\n    elif isinstance(rollback_to, int):\n        rollback_to = {\"slot_no\": rollback_to}\n\n    if \"slot_no\" not in rollback_to:\n        raise ValueError(\"rollback_to must contain slot_no\")\n\n    results = await self._put_async(\n        f\"/patterns/{pattern}\",\n        body={\"rollback_to\": rollback_to, \"limit\": limit.value},\n        timeout=timeout,\n    )\n\n    return PatternResponse.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.bulk_add_pattern","title":"bulk_add_pattern","text":"<pre><code>bulk_add_pattern(patterns: list[str], rollback_to: int | dict | Point, limit: Limit = Limit.SAFE, timeout: int = 300) -&gt; PatternResponse\n</code></pre> <p>Add multiple patterns to the database.</p> PARAMETER DESCRIPTION <code>patterns</code> <p>The capture patterns.</p> <p> TYPE: <code>list[str]</code> </p> <code>rollback_to</code> <p>The point to rollback to. Must be either a slot number (int), a Point object, or a dictionary with keys <code>slot_no</code> (required) and <code>header_hash</code> (optional).</p> <p> TYPE: <code>int | dict | Point</code> </p> <code>limit</code> <p>Use safe or unsafe boundaries as defined in the docs. Defaults to Limit.SAFE.</p> <p> TYPE: <code>Limit</code> DEFAULT: <code>SAFE</code> </p> <code>timeout</code> <p>Timeout for the request. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>PatternResponse</code> <p>A PatternResponse object.</p> Source code in <code>src/kupo/client.py</code> <pre><code>def bulk_add_pattern(\n    self,\n    patterns: list[str],\n    rollback_to: int | dict | Point,\n    limit: Limit = Limit.SAFE,\n    timeout: int = 300,\n) -&gt; PatternResponse:\n    \"\"\"Add multiple patterns to the database.\n\n    Args:\n        patterns: The capture patterns.\n        rollback_to: The point to rollback to. Must be either a slot number (int),\n            a Point object, or a dictionary with keys `slot_no` (required) and\n            `header_hash` (optional).\n        limit: Use safe or unsafe boundaries as defined in the docs.\n            Defaults to Limit.SAFE.\n        timeout: Timeout for the request. Defaults to 300.\n\n    Returns:\n        A PatternResponse object.\n    \"\"\"\n    if isinstance(rollback_to, Point):\n        rollback_to = rollback_to.model_dump(mode=\"json\")\n    elif isinstance(rollback_to, int):\n        rollback_to = {\"slot_no\": rollback_to}\n\n    if \"slot_no\" not in rollback_to:\n        raise ValueError(\"rollback_to must contain slot_no\")\n\n    results = self._put(\n        \"/patterns\",\n        body={\n            \"patterns\": patterns,\n            \"rollback_to\": rollback_to,\n            \"limit\": limit.value,\n        },\n        timeout=timeout,\n    )\n\n    return PatternResponse.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.bulk_add_pattern_async","title":"bulk_add_pattern_async  <code>async</code>","text":"<pre><code>bulk_add_pattern_async(patterns: list[str], rollback_to: int | dict | Point, limit: Limit = Limit.SAFE, timeout: int = 300) -&gt; PatternResponse\n</code></pre> <p>Add multiple patterns to the database.</p> PARAMETER DESCRIPTION <code>patterns</code> <p>The capture patterns.</p> <p> TYPE: <code>list[str]</code> </p> <code>rollback_to</code> <p>The point to rollback to. Must be either a slot number (int), a Point object, or a dictionary with keys <code>slot_no</code> (required) and <code>header_hash</code> (optional).</p> <p> TYPE: <code>int | dict | Point</code> </p> <code>limit</code> <p>Use safe or unsafe boundaries as defined in the docs. Defaults to Limit.SAFE.</p> <p> TYPE: <code>Limit</code> DEFAULT: <code>SAFE</code> </p> <code>timeout</code> <p>Timeout for the request. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>PatternResponse</code> <p>A PatternResponse object.</p> Source code in <code>src/kupo/client.py</code> <pre><code>async def bulk_add_pattern_async(\n    self,\n    patterns: list[str],\n    rollback_to: int | dict | Point,\n    limit: Limit = Limit.SAFE,\n    timeout: int = 300,\n) -&gt; PatternResponse:\n    \"\"\"Add multiple patterns to the database.\n\n    Args:\n        patterns: The capture patterns.\n        rollback_to: The point to rollback to. Must be either a slot number (int),\n            a Point object, or a dictionary with keys `slot_no` (required) and\n            `header_hash` (optional).\n        limit: Use safe or unsafe boundaries as defined in the docs.\n            Defaults to Limit.SAFE.\n        timeout: Timeout for the request. Defaults to 300.\n\n    Returns:\n        A PatternResponse object.\n    \"\"\"\n    if isinstance(rollback_to, Point):\n        rollback_to = rollback_to.model_dump(mode=\"json\")\n    elif isinstance(rollback_to, int):\n        rollback_to = {\"slot_no\": rollback_to}\n\n    if \"slot_no\" not in rollback_to:\n        raise ValueError(\"rollback_to must contain slot_no\")\n\n    results = await self._put_async(\n        \"/patterns\",\n        body={\n            \"patterns\": patterns,\n            \"rollback_to\": rollback_to,\n            \"limit\": limit.value,\n        },\n        timeout=timeout,\n    )\n\n    return PatternResponse.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_all_matches","title":"get_all_matches","text":"<pre><code>get_all_matches(resolve_hashes: bool = False, spent: bool = False, unspent: bool = False, order: Order = Order.DESC, created_after: int | str | None = None, spent_after: int | str | None = None, created_before: int | str | None = None, spent_before: int | str | None = None, policy_id: str | ScriptHash | None = None, asset_name: str | AssetName | None = None, transaction_id: str | TransactionId | None = None, output_index: int | None = None, timeout: int = 300, model: MatchQuery | None = None) -&gt; MatchResponse\n</code></pre> <p>Get all matches.</p> PARAMETER DESCRIPTION <code>resolve_hashes</code> <p>Resolve hashes to human readable strings. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>spent</code> <p>Only return spent transactions. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>unspent</code> <p>Only return unspect transactions. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order</code> <p>Must be Orders.ASC or Orders.DESC. Defaults to Order.DESC.</p> <p> TYPE: <code>Order</code> DEFAULT: <code>DESC</code> </p> <code>created_after</code> <p>UTxO created after slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>spent_after</code> <p>UTxO spent after slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>UTxO created before slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>spent_before</code> <p>UTxO spent before slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>policy_id</code> <p>UTxO contains token with policy id. Defaults to None.</p> <p> TYPE: <code>str | ScriptHash | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>UTxO contains token with policy name. Defaults to None.</p> <p> TYPE: <code>str | AssetName | None</code> DEFAULT: <code>None</code> </p> <code>transaction_id</code> <p>UTxOs with transaction id. Defaults to None.</p> <p> TYPE: <code>str | TransactionId | None</code> DEFAULT: <code>None</code> </p> <code>output_index</code> <p>Index of output. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> <code>model</code> <p>The MatchQuery model. Will use if supplied. Defaults to None.</p> <p> TYPE: <code>MatchQuery | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>MatchResponse</code> <p>description</p> Source code in <code>src/kupo/client.py</code> <pre><code>@rest_wrapper(param_model=MatchQuery)\ndef get_all_matches(\n    self,\n    resolve_hashes: bool = False,\n    spent: bool = False,\n    unspent: bool = False,\n    order: Order = Order.DESC,\n    created_after: int | str | None = None,\n    spent_after: int | str | None = None,\n    created_before: int | str | None = None,\n    spent_before: int | str | None = None,\n    policy_id: str | ScriptHash | None = None,\n    asset_name: str | AssetName | None = None,\n    transaction_id: str | TransactionId | None = None,\n    output_index: int | None = None,\n    timeout: int = 300,\n    model: MatchQuery | None = None,\n) -&gt; MatchResponse:\n    \"\"\"Get all matches.\n\n    Args:\n        resolve_hashes: Resolve hashes to human readable strings. Defaults to False.\n        spent: Only return spent transactions. Defaults to False.\n        unspent: Only return unspect transactions. Defaults to False.\n        order: Must be Orders.ASC or Orders.DESC. Defaults to Order.DESC.\n        created_after: UTxO created after slot number. Defaults to None.\n        spent_after: UTxO spent after slot number. Defaults to None.\n        created_before: UTxO created before slot number. Defaults to None.\n        spent_before: UTxO spent before slot number. Defaults to None.\n        policy_id: UTxO contains token with policy id. Defaults to None.\n        asset_name: UTxO contains token with policy name. Defaults to None.\n        transaction_id: UTxOs with transaction id. Defaults to None.\n        output_index: Index of output. Defaults to None.\n        timeout: The timeout in seconds. Defaults to 300.\n        model: The MatchQuery model. Will use if supplied. Defaults to None.\n\n    Returns:\n        _description_\n    \"\"\"\n    if model is None:\n        raise ValueError(\"model must be None\")\n\n    response = self._get(\n        \"/matches\",\n        params=model.params(),\n        flags=model.flags(),\n        timeout=timeout,\n    )\n\n    return MatchResponse.model_validate(response)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_all_matches_async","title":"get_all_matches_async  <code>async</code>","text":"<pre><code>get_all_matches_async(resolve_hashes: bool = False, spent: bool = False, unspent: bool = False, order: Order = Order.DESC, created_after: int | str | None = None, spent_after: int | str | None = None, created_before: int | str | None = None, spent_before: int | str | None = None, policy_id: str | ScriptHash | None = None, asset_name: str | AssetName | None = None, transaction_id: str | TransactionId | None = None, output_index: int | None = None, timeout: int = 300, model: MatchQuery | None = None) -&gt; MatchResponse\n</code></pre> <p>Get all matches.</p> PARAMETER DESCRIPTION <code>resolve_hashes</code> <p>Resolve hashes to human readable strings. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>spent</code> <p>Only return spent transactions. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>unspent</code> <p>Only return unspect transactions. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order</code> <p>Must be Orders.ASC or Orders.DESC. Defaults to Order.DESC.</p> <p> TYPE: <code>Order</code> DEFAULT: <code>DESC</code> </p> <code>created_after</code> <p>UTxO created after slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>spent_after</code> <p>UTxO spent after slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>UTxO created before slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>spent_before</code> <p>UTxO spent before slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>policy_id</code> <p>UTxO contains token with policy id. Defaults to None.</p> <p> TYPE: <code>str | ScriptHash | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>UTxO contains token with policy name. Defaults to None.</p> <p> TYPE: <code>str | AssetName | None</code> DEFAULT: <code>None</code> </p> <code>transaction_id</code> <p>UTxOs with transaction id. Defaults to None.</p> <p> TYPE: <code>str | TransactionId | None</code> DEFAULT: <code>None</code> </p> <code>output_index</code> <p>Index of output. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> <code>model</code> <p>The MatchQuery model. Will use if supplied. Defaults to None.</p> <p> TYPE: <code>MatchQuery | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>MatchResponse</code> <p>description</p> Source code in <code>src/kupo/client.py</code> <pre><code>@rest_wrapper(param_model=MatchQuery, is_async=True)\nasync def get_all_matches_async(\n    self,\n    resolve_hashes: bool = False,\n    spent: bool = False,\n    unspent: bool = False,\n    order: Order = Order.DESC,\n    created_after: int | str | None = None,\n    spent_after: int | str | None = None,\n    created_before: int | str | None = None,\n    spent_before: int | str | None = None,\n    policy_id: str | ScriptHash | None = None,\n    asset_name: str | AssetName | None = None,\n    transaction_id: str | TransactionId | None = None,\n    output_index: int | None = None,\n    timeout: int = 300,\n    model: MatchQuery | None = None,\n) -&gt; MatchResponse:\n    \"\"\"Get all matches.\n\n    Args:\n        resolve_hashes: Resolve hashes to human readable strings. Defaults to False.\n        spent: Only return spent transactions. Defaults to False.\n        unspent: Only return unspect transactions. Defaults to False.\n        order: Must be Orders.ASC or Orders.DESC. Defaults to Order.DESC.\n        created_after: UTxO created after slot number. Defaults to None.\n        spent_after: UTxO spent after slot number. Defaults to None.\n        created_before: UTxO created before slot number. Defaults to None.\n        spent_before: UTxO spent before slot number. Defaults to None.\n        policy_id: UTxO contains token with policy id. Defaults to None.\n        asset_name: UTxO contains token with policy name. Defaults to None.\n        transaction_id: UTxOs with transaction id. Defaults to None.\n        output_index: Index of output. Defaults to None.\n        timeout: The timeout in seconds. Defaults to 300.\n        model: The MatchQuery model. Will use if supplied. Defaults to None.\n\n    Returns:\n        _description_\n    \"\"\"\n    if model is None:\n        raise ValueError(\"model must be None\")\n\n    response = await self._get_async(\n        \"/matches\",\n        params=model.params(),\n        flags=model.flags(),\n        timeout=timeout,\n    )\n\n    return MatchResponse.model_validate(response)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_datum_by_hash","title":"get_datum_by_hash","text":"<pre><code>get_datum_by_hash(datum_hash: str, timeout: int = 300) -&gt; Datum\n</code></pre> <p>Get a datum by its hash.</p> PARAMETER DESCRIPTION <code>datum_hash</code> <p>The hash of the datum to fetch.</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>Datum</code> <p>The datum matching the hash.</p> Source code in <code>src/kupo/client.py</code> <pre><code>def get_datum_by_hash(self, datum_hash: str, timeout: int = 300) -&gt; Datum:\n    \"\"\"Get a datum by its hash.\n\n    Args:\n        datum_hash: The hash of the datum to fetch.\n        timeout: The timeout in seconds. Defaults to 300.\n\n    Returns:\n        The datum matching the hash.\n    \"\"\"\n    results = self._get(f\"/datums/{datum_hash}\", timeout=timeout)\n\n    return Datum.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_datum_by_hash_async","title":"get_datum_by_hash_async  <code>async</code>","text":"<pre><code>get_datum_by_hash_async(datum_hash: str, timeout: int = 300) -&gt; Datum\n</code></pre> <p>Get a datum by its hash.</p> PARAMETER DESCRIPTION <code>datum_hash</code> <p>The hash of the datum to fetch.</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>Datum</code> <p>The datum matching the hash.</p> Source code in <code>src/kupo/client.py</code> <pre><code>async def get_datum_by_hash_async(\n    self,\n    datum_hash: str,\n    timeout: int = 300,\n) -&gt; Datum:\n    \"\"\"Get a datum by its hash.\n\n    Args:\n        datum_hash: The hash of the datum to fetch.\n        timeout: The timeout in seconds. Defaults to 300.\n\n    Returns:\n        The datum matching the hash.\n    \"\"\"\n    results = await self._get_async(f\"/datums/{datum_hash}\", timeout=timeout)\n\n    return Datum.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_matches","title":"get_matches","text":"<pre><code>get_matches(pattern: str | Address, resolve_hashes: bool = False, spent: bool = False, unspent: bool = False, order: Order = Order.DESC, created_after: int | str | None = None, spent_after: int | str | None = None, created_before: int | str | None = None, spent_before: int | str | None = None, policy_id: str | ScriptHash | None = None, asset_name: str | AssetName | None = None, transaction_id: str | TransactionId | None = None, output_index: int | None = None, timeout: int = 300, model: MatchQuery | None = None) -&gt; MatchResponse\n</code></pre> <p>Get all matches.</p> PARAMETER DESCRIPTION <code>pattern</code> <p>The pattern to match.</p> <p> TYPE: <code>str | Address</code> </p> <code>resolve_hashes</code> <p>Resolve hashes to human readable strings. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>spent</code> <p>Only return spent transactions. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>unspent</code> <p>Only return unspect transactions. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order</code> <p>Must be Orders.ASC or Orders.DESC. Defaults to Order.DESC.</p> <p> TYPE: <code>Order</code> DEFAULT: <code>DESC</code> </p> <code>created_after</code> <p>UTxO created after slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>spent_after</code> <p>UTxO spent after slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>UTxO created before slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>spent_before</code> <p>UTxO spent before slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>policy_id</code> <p>UTxO contains token with policy id. Defaults to None.</p> <p> TYPE: <code>str | ScriptHash | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>UTxO contains token with policy name. Defaults to None.</p> <p> TYPE: <code>str | AssetName | None</code> DEFAULT: <code>None</code> </p> <code>transaction_id</code> <p>UTxOs with transaction id. Defaults to None.</p> <p> TYPE: <code>str | TransactionId | None</code> DEFAULT: <code>None</code> </p> <code>output_index</code> <p>Index of output. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> <code>model</code> <p>The MatchQuery model. Will use if supplied. Defaults to None.</p> <p> TYPE: <code>MatchQuery | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>MatchResponse</code> <p>The MatchResponse model.</p> Source code in <code>src/kupo/client.py</code> <pre><code>@rest_wrapper(param_model=MatchQuery)\ndef get_matches(\n    self,\n    pattern: str | Address,\n    resolve_hashes: bool = False,\n    spent: bool = False,\n    unspent: bool = False,\n    order: Order = Order.DESC,\n    created_after: int | str | None = None,\n    spent_after: int | str | None = None,\n    created_before: int | str | None = None,\n    spent_before: int | str | None = None,\n    policy_id: str | ScriptHash | None = None,\n    asset_name: str | AssetName | None = None,\n    transaction_id: str | TransactionId | None = None,\n    output_index: int | None = None,\n    timeout: int = 300,\n    model: MatchQuery | None = None,\n) -&gt; MatchResponse:\n    \"\"\"Get all matches.\n\n    Args:\n        pattern: The pattern to match.\n        resolve_hashes: Resolve hashes to human readable strings. Defaults to False.\n        spent: Only return spent transactions. Defaults to False.\n        unspent: Only return unspect transactions. Defaults to False.\n        order: Must be Orders.ASC or Orders.DESC. Defaults to Order.DESC.\n        created_after: UTxO created after slot number. Defaults to None.\n        spent_after: UTxO spent after slot number. Defaults to None.\n        created_before: UTxO created before slot number. Defaults to None.\n        spent_before: UTxO spent before slot number. Defaults to None.\n        policy_id: UTxO contains token with policy id. Defaults to None.\n        asset_name: UTxO contains token with policy name. Defaults to None.\n        transaction_id: UTxOs with transaction id. Defaults to None.\n        output_index: Index of output. Defaults to None.\n        timeout: The timeout in seconds. Defaults to 300.\n        model: The MatchQuery model. Will use if supplied. Defaults to None.\n\n    Returns:\n        The MatchResponse model.\n    \"\"\"\n    if model is None:\n        raise ValueError(\"model must be None\")\n\n    response = self._get(\n        f\"/matches/{pattern}\",\n        params=model.params(),\n        flags=model.flags(),\n        timeout=timeout,\n    )\n\n    return MatchResponse.model_validate(response)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_matches_async","title":"get_matches_async  <code>async</code>","text":"<pre><code>get_matches_async(pattern: str | Address, resolve_hashes: bool = False, spent: bool = False, unspent: bool = False, order: Order = Order.DESC, created_after: int | str | None = None, spent_after: int | str | None = None, created_before: int | str | None = None, spent_before: int | str | None = None, policy_id: str | ScriptHash | None = None, asset_name: str | AssetName | None = None, transaction_id: str | TransactionId | None = None, output_index: int | None = None, timeout: int = 300, model: MatchQuery | None = None) -&gt; MatchResponse\n</code></pre> <p>Get all matches.</p> PARAMETER DESCRIPTION <code>pattern</code> <p>The pattern to match.</p> <p> TYPE: <code>str | Address</code> </p> <code>resolve_hashes</code> <p>Resolve hashes to human readable strings. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>spent</code> <p>Only return spent transactions. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>unspent</code> <p>Only return unspect transactions. Defaults to False.</p> <p> TYPE: <code>bool</code> DEFAULT: <code>False</code> </p> <code>order</code> <p>Must be Orders.ASC or Orders.DESC. Defaults to Order.DESC.</p> <p> TYPE: <code>Order</code> DEFAULT: <code>DESC</code> </p> <code>created_after</code> <p>UTxO created after slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>spent_after</code> <p>UTxO spent after slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>created_before</code> <p>UTxO created before slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>spent_before</code> <p>UTxO spent before slot number. Defaults to None.</p> <p> TYPE: <code>int | str | None</code> DEFAULT: <code>None</code> </p> <code>policy_id</code> <p>UTxO contains token with policy id. Defaults to None.</p> <p> TYPE: <code>str | ScriptHash | None</code> DEFAULT: <code>None</code> </p> <code>asset_name</code> <p>UTxO contains token with policy name. Defaults to None.</p> <p> TYPE: <code>str | AssetName | None</code> DEFAULT: <code>None</code> </p> <code>transaction_id</code> <p>UTxOs with transaction id. Defaults to None.</p> <p> TYPE: <code>str | TransactionId | None</code> DEFAULT: <code>None</code> </p> <code>output_index</code> <p>Index of output. Defaults to None.</p> <p> TYPE: <code>int | None</code> DEFAULT: <code>None</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> <code>model</code> <p>The MatchQuery model. Will use if supplied. Defaults to None.</p> <p> TYPE: <code>MatchQuery | None</code> DEFAULT: <code>None</code> </p> RETURNS DESCRIPTION <code>MatchResponse</code> <p>The MatchResponse model.</p> Source code in <code>src/kupo/client.py</code> <pre><code>@rest_wrapper(param_model=MatchQuery, is_async=True)\nasync def get_matches_async(\n    self,\n    pattern: str | Address,\n    resolve_hashes: bool = False,\n    spent: bool = False,\n    unspent: bool = False,\n    order: Order = Order.DESC,\n    created_after: int | str | None = None,\n    spent_after: int | str | None = None,\n    created_before: int | str | None = None,\n    spent_before: int | str | None = None,\n    policy_id: str | ScriptHash | None = None,\n    asset_name: str | AssetName | None = None,\n    transaction_id: str | TransactionId | None = None,\n    output_index: int | None = None,\n    timeout: int = 300,\n    model: MatchQuery | None = None,\n) -&gt; MatchResponse:\n    \"\"\"Get all matches.\n\n    Args:\n        pattern: The pattern to match.\n        resolve_hashes: Resolve hashes to human readable strings. Defaults to False.\n        spent: Only return spent transactions. Defaults to False.\n        unspent: Only return unspect transactions. Defaults to False.\n        order: Must be Orders.ASC or Orders.DESC. Defaults to Order.DESC.\n        created_after: UTxO created after slot number. Defaults to None.\n        spent_after: UTxO spent after slot number. Defaults to None.\n        created_before: UTxO created before slot number. Defaults to None.\n        spent_before: UTxO spent before slot number. Defaults to None.\n        policy_id: UTxO contains token with policy id. Defaults to None.\n        asset_name: UTxO contains token with policy name. Defaults to None.\n        transaction_id: UTxOs with transaction id. Defaults to None.\n        output_index: Index of output. Defaults to None.\n        timeout: The timeout in seconds. Defaults to 300.\n        model: The MatchQuery model. Will use if supplied. Defaults to None.\n\n    Returns:\n        The MatchResponse model.\n    \"\"\"\n    if model is None:\n        raise ValueError(\"model must be None\")\n\n    response = await self._get_async(\n        f\"/matches/{pattern}\",\n        params=model.params(),\n        flags=model.flags(),\n        timeout=timeout,\n    )\n\n    return MatchResponse.model_validate(response)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_metadata_by_tx","title":"get_metadata_by_tx","text":"<pre><code>get_metadata_by_tx(tx_hash: str, timeout: int = 300) -&gt; Metadata\n</code></pre> <p>Get a metadata by transaction hash.</p> PARAMETER DESCRIPTION <code>tx_hash</code> <p>The hash of the metadata to fetch.</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>Metadata</code> <p>The metadata matching the hash.</p> Source code in <code>src/kupo/client.py</code> <pre><code>def get_metadata_by_tx(self, tx_hash: str, timeout: int = 300) -&gt; Metadata:\n    \"\"\"Get a metadata by transaction hash.\n\n    Args:\n        tx_hash: The hash of the metadata to fetch.\n        timeout: The timeout in seconds. Defaults to 300.\n\n    Returns:\n        The metadata matching the hash.\n    \"\"\"\n    results = self._get(f\"/metadata/{tx_hash}\", timeout=timeout)\n\n    return Metadata.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_metadata_by_tx_async","title":"get_metadata_by_tx_async  <code>async</code>","text":"<pre><code>get_metadata_by_tx_async(tx_hash: str, timeout: int = 300) -&gt; Metadata\n</code></pre> <p>Get a datum by its hash.</p> PARAMETER DESCRIPTION <code>tx_hash</code> <p>The hash of the metadata to fetch.</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>Metadata</code> <p>The metadata matching the hash.</p> Source code in <code>src/kupo/client.py</code> <pre><code>async def get_metadata_by_tx_async(\n    self,\n    tx_hash: str,\n    timeout: int = 300,\n) -&gt; Metadata:\n    \"\"\"Get a datum by its hash.\n\n    Args:\n        tx_hash: The hash of the metadata to fetch.\n        timeout: The timeout in seconds. Defaults to 300.\n\n    Returns:\n        The metadata matching the hash.\n    \"\"\"\n    results = await self._get_async(f\"/metadata/{tx_hash}\", timeout=timeout)\n\n    return Metadata.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_pattern","title":"get_pattern","text":"<pre><code>get_pattern(pattern: str, timeout: int = 300) -&gt; PatternResponse\n</code></pre> <p>Get all patterns that match a given pattern (if possible).</p> PARAMETER DESCRIPTION <code>pattern</code> <p>The pattern to match.</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>PatternResponse</code> <p>The list of matching patterns.</p> Source code in <code>src/kupo/client.py</code> <pre><code>def get_pattern(self, pattern: str, timeout: int = 300) -&gt; PatternResponse:\n    \"\"\"Get all patterns that match a given pattern (if possible).\n\n    Args:\n        pattern: The pattern to match.\n        timeout: The timeout in seconds. Defaults to 300.\n\n    Returns:\n        The list of matching patterns.\n    \"\"\"\n    results = self._get(f\"/patterns/{pattern}\", timeout=timeout)\n\n    return PatternResponse.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_pattern_async","title":"get_pattern_async  <code>async</code>","text":"<pre><code>get_pattern_async(pattern: str, timeout: int = 300) -&gt; PatternResponse\n</code></pre> <p>Get all patterns that match a given pattern (if possible).</p> PARAMETER DESCRIPTION <code>pattern</code> <p>The pattern to match.</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>PatternResponse</code> <p>The list of matching patterns.</p> Source code in <code>src/kupo/client.py</code> <pre><code>async def get_pattern_async(\n    self,\n    pattern: str,\n    timeout: int = 300,\n) -&gt; PatternResponse:\n    \"\"\"Get all patterns that match a given pattern (if possible).\n\n    Args:\n        pattern: The pattern to match.\n        timeout: The timeout in seconds. Defaults to 300.\n\n    Returns:\n        The list of matching patterns.\n    \"\"\"\n    results = await self._get_async(f\"/patterns/{pattern}\", timeout=timeout)\n\n    return PatternResponse.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_patterns","title":"get_patterns","text":"<pre><code>get_patterns(timeout: int = 300) -&gt; PatternResponse\n</code></pre> <p>Get all patterns used for matching.</p> PARAMETER DESCRIPTION <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>PatternResponse</code> <p>The list of matching patterns.</p> Source code in <code>src/kupo/client.py</code> <pre><code>def get_patterns(self, timeout: int = 300) -&gt; PatternResponse:\n    \"\"\"Get all patterns used for matching.\n\n    Args:\n        timeout: The timeout in seconds. Defaults to 300.\n\n    Returns:\n        The list of matching patterns.\n    \"\"\"\n    results = self._get(\"/patterns\", timeout=timeout)\n\n    return PatternResponse.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_patterns_async","title":"get_patterns_async  <code>async</code>","text":"<pre><code>get_patterns_async(timeout: int = 300) -&gt; PatternResponse\n</code></pre> <p>Get all patterns used for matching.</p> PARAMETER DESCRIPTION <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>PatternResponse</code> <p>The list of matching patterns.</p> Source code in <code>src/kupo/client.py</code> <pre><code>async def get_patterns_async(self, timeout: int = 300) -&gt; PatternResponse:\n    \"\"\"Get all patterns used for matching.\n\n    Args:\n        timeout: The timeout in seconds. Defaults to 300.\n\n    Returns:\n        The list of matching patterns.\n    \"\"\"\n    results = await self._get_async(\"/patterns\", timeout=timeout)\n\n    return PatternResponse.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_script_by_hash","title":"get_script_by_hash","text":"<pre><code>get_script_by_hash(script_hash: str, timeout: int = 300) -&gt; Script\n</code></pre> <p>Get a script by its hash.</p> PARAMETER DESCRIPTION <code>script_hash</code> <p>The hash of the script to fetch.</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>Script</code> <p>The script matching the hash.</p> Source code in <code>src/kupo/client.py</code> <pre><code>def get_script_by_hash(self, script_hash: str, timeout: int = 300) -&gt; Script:\n    \"\"\"Get a script by its hash.\n\n    Args:\n        script_hash: The hash of the script to fetch.\n        timeout: The timeout in seconds. Defaults to 300.\n\n    Returns:\n        The script matching the hash.\n    \"\"\"\n    results = self._get(f\"/scripts/{script_hash}\", timeout=timeout)\n\n    return Script.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.get_script_by_hash_async","title":"get_script_by_hash_async  <code>async</code>","text":"<pre><code>get_script_by_hash_async(script_hash: str, timeout: int = 300) -&gt; Script\n</code></pre> <p>Get a script by its hash.</p> PARAMETER DESCRIPTION <code>script_hash</code> <p>The hash of the script to fetch.</p> <p> TYPE: <code>str</code> </p> <code>timeout</code> <p>The timeout in seconds. Defaults to 300.</p> <p> TYPE: <code>int</code> DEFAULT: <code>300</code> </p> RETURNS DESCRIPTION <code>Script</code> <p>The script matching the hash.</p> Source code in <code>src/kupo/client.py</code> <pre><code>async def get_script_by_hash_async(\n    self,\n    script_hash: str,\n    timeout: int = 300,\n) -&gt; Script:\n    \"\"\"Get a script by its hash.\n\n    Args:\n        script_hash: The hash of the script to fetch.\n        timeout: The timeout in seconds. Defaults to 300.\n\n    Returns:\n        The script matching the hash.\n    \"\"\"\n    results = await self._get_async(f\"/scripts/{script_hash}\", timeout=timeout)\n\n    return Script.model_validate(results)\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.health","title":"health","text":"<pre><code>health() -&gt; Health\n</code></pre> <p>Check the health of the API.</p> Source code in <code>src/kupo/client.py</code> <pre><code>def health(self) -&gt; Health:\n    \"\"\"Check the health of the API.\"\"\"\n    return Health.model_validate(self._get(\"/health\"))\n</code></pre>"},{"location":"api/client/#kupo.client.KupoClient.health_async","title":"health_async  <code>async</code>","text":"<pre><code>health_async() -&gt; Health\n</code></pre> <p>Check the health of the API.</p> Source code in <code>src/kupo/client.py</code> <pre><code>async def health_async(self) -&gt; Health:\n    \"\"\"Check the health of the API.\"\"\"\n    return Health.model_validate(await self._get_async(\"/health\"))\n</code></pre>"},{"location":"api/models/","title":"Models API Reference","text":"<p>This page documents all the data models used in the library.</p>"},{"location":"api/models/#datum-model","title":"Datum Model","text":""},{"location":"api/models/#kupo.models.Datum","title":"kupo.models.Datum  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/#health-model","title":"Health Model","text":""},{"location":"api/models/#kupo.models.Health","title":"kupo.models.Health  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>An overview of the server &amp; connection status. Note that, when <code>most_recent_checkpoint</code> and <code>most_recent_node_tip</code> are equal, the index is fully synchronized.</p>"},{"location":"api/models/#match-model","title":"Match Model","text":""},{"location":"api/models/#kupo.models.Match","title":"kupo.models.Match  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/#metadata-model","title":"Metadata Model","text":""},{"location":"api/models/#kupo.models.Metadata","title":"kupo.models.Metadata  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/#pattern-model","title":"Pattern Model","text":""},{"location":"api/models/#kupo.models.Pattern","title":"kupo.models.Pattern","text":"<p>               Bases: <code>RootModel[Union[Wildcard, str, constr(pattern='[0-9a-f]{56}\\\\.(.*|[0-9a-f]{2,64})'), constr(pattern='(.*|[0-9]+)@[0-9a-f]{64}')]]</code></p>"},{"location":"api/models/#point-model","title":"Point Model","text":""},{"location":"api/models/#kupo.models.Point","title":"kupo.models.Point  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p>"},{"location":"api/models/#script-model","title":"Script Model","text":""},{"location":"api/models/#kupo.models.Script","title":"kupo.models.Script  <code>pydantic-model</code>","text":"<p>               Bases: <code>BaseModel</code></p>"}]}